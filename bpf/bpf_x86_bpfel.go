// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfConfig struct {
	Pname [16]uint8
	Plen  uint32
}

type BpfEvent struct {
	Meta struct {
		Pc          uint64
		Skb         uint64
		SecondParam uint64
		Mark        uint32
		Netns       uint32
		Ifindex     uint32
		Ifname      [16]uint8
	}
	Tuple struct {
		Saddr struct {
			V4addr uint32
			_      [12]byte
		}
		Daddr struct {
			V4addr uint32
			_      [12]byte
		}
		Sport      uint16
		Dport      uint16
		L3Proto    uint16
		L4Proto    uint8
		TcpFlags   uint8
		PayloadLen uint16
	}
}

type BpfPinfo struct {
	Pid   uint32
	Pname [16]int8
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	CgroupConnect4    *ebpf.ProgramSpec `ebpf:"cgroup_connect4"`
	CgroupConnect6    *ebpf.ProgramSpec `ebpf:"cgroup_connect6"`
	CgroupSendmsg4    *ebpf.ProgramSpec `ebpf:"cgroup_sendmsg4"`
	CgroupSendmsg6    *ebpf.ProgramSpec `ebpf:"cgroup_sendmsg6"`
	CgroupSockCreate  *ebpf.ProgramSpec `ebpf:"cgroup_sock_create"`
	CgroupSockRelease *ebpf.ProgramSpec `ebpf:"cgroup_sock_release"`
	KprobeFreeSkb     *ebpf.ProgramSpec `ebpf:"kprobe_free_skb"`
	KprobeSkb1        *ebpf.ProgramSpec `ebpf:"kprobe_skb_1"`
	KprobeSkb2        *ebpf.ProgramSpec `ebpf:"kprobe_skb_2"`
	KprobeSkb3        *ebpf.ProgramSpec `ebpf:"kprobe_skb_3"`
	KprobeSkb4        *ebpf.ProgramSpec `ebpf:"kprobe_skb_4"`
	KprobeSkb5        *ebpf.ProgramSpec `ebpf:"kprobe_skb_5"`
	KretprobeAllocSkb *ebpf.ProgramSpec `ebpf:"kretprobe_alloc_skb"`
	KretprobeSkb      *ebpf.ProgramSpec `ebpf:"kretprobe_skb"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	BpSkbMap       *ebpf.MapSpec `ebpf:"bp_skb_map"`
	CookiePinfoMap *ebpf.MapSpec `ebpf:"cookie_pinfo_map"`
	Events         *ebpf.MapSpec `ebpf:"events"`
	SkbFromProcess *ebpf.MapSpec `ebpf:"skb_from_process"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
	CONFIG             *ebpf.VariableSpec `ebpf:"CONFIG"`
	*ebpf.VariableSpec `ebpf:"_"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	BpSkbMap       *ebpf.Map `ebpf:"bp_skb_map"`
	CookiePinfoMap *ebpf.Map `ebpf:"cookie_pinfo_map"`
	Events         *ebpf.Map `ebpf:"events"`
	SkbFromProcess *ebpf.Map `ebpf:"skb_from_process"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.BpSkbMap,
		m.CookiePinfoMap,
		m.Events,
		m.SkbFromProcess,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
	CONFIG         *ebpf.Variable `ebpf:"CONFIG"`
	*ebpf.Variable `ebpf:"_"`
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	CgroupConnect4    *ebpf.Program `ebpf:"cgroup_connect4"`
	CgroupConnect6    *ebpf.Program `ebpf:"cgroup_connect6"`
	CgroupSendmsg4    *ebpf.Program `ebpf:"cgroup_sendmsg4"`
	CgroupSendmsg6    *ebpf.Program `ebpf:"cgroup_sendmsg6"`
	CgroupSockCreate  *ebpf.Program `ebpf:"cgroup_sock_create"`
	CgroupSockRelease *ebpf.Program `ebpf:"cgroup_sock_release"`
	KprobeFreeSkb     *ebpf.Program `ebpf:"kprobe_free_skb"`
	KprobeSkb1        *ebpf.Program `ebpf:"kprobe_skb_1"`
	KprobeSkb2        *ebpf.Program `ebpf:"kprobe_skb_2"`
	KprobeSkb3        *ebpf.Program `ebpf:"kprobe_skb_3"`
	KprobeSkb4        *ebpf.Program `ebpf:"kprobe_skb_4"`
	KprobeSkb5        *ebpf.Program `ebpf:"kprobe_skb_5"`
	KretprobeAllocSkb *ebpf.Program `ebpf:"kretprobe_alloc_skb"`
	KretprobeSkb      *ebpf.Program `ebpf:"kretprobe_skb"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.CgroupConnect4,
		p.CgroupConnect6,
		p.CgroupSendmsg4,
		p.CgroupSendmsg6,
		p.CgroupSockCreate,
		p.CgroupSockRelease,
		p.KprobeFreeSkb,
		p.KprobeSkb1,
		p.KprobeSkb2,
		p.KprobeSkb3,
		p.KprobeSkb4,
		p.KprobeSkb5,
		p.KretprobeAllocSkb,
		p.KretprobeSkb,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
